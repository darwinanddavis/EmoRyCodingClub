node("a") %>% html_nodes("href")
node("a")
node("section") %>% html_nodes("a")
node("section") %>% html_nodes("href")
node("a") %>% html_nodes("href")
node("a")
node("section") %>% html_nodes("a")
node("section") %>% html_nodes("a") %>% html_attr("href")
node("section") %>% html_nodes("a") %>% html_text()
node("section") %>% html_nodes("a") %>% html_attr("href")
node("section") %>% html_nodes("a") %>% html_text()
require(magick)
node("img") %>% html_attr("src") %>% image_read()
rmarkdown::render_site()
url <- "https://r4ds.had.co.nz/index.html"
node("a") %>% html_nodes("src")
require(dplyr)
node("a") %>% html_nodes("src")
node <- function(n){
url %>% read_html %>% html_nodes(n)  # get just tables
}
node("a") %>% html_nodes("src")
require(rvest)
node("a") %>% html_nodes("src")
node("a")
node("a") %>% html_attr("href")
node("a") %>% html_attr("href") %>% length
node("a") %>% html_attr("href") %>% sample(10)
node("a") %>% html_attr("href") %>% length
node("a") %>% html_attr("href") %>% head
node("a") %>% html_attr("href") %>% head|length
node("a") %>% html_attr("href") %>% head| %>% length
node("a") %>% html_attr("href") %>% c(head,length)
node("a") %>% html_attr("href") %>% c(sample(10),length)
node("a") %>% html_attr("href") %>% length
node("a") %>% html_attr("href") %>% sample(10)
node("a")
node("a") %>% html_nodes("src")
node("a") %>% html_nodes("href")
node("a")
node("section")
node("section") %>% html_nodes("a") %>% html_attr("href")
tt <- list(
20100101120101,
"2009-01-02 12-01-02",
"2009.01.03 12:01:03",
"2009-1-4 12-1-4",
"2009-1, 5 12:1, 5",
"200901-08 1201-08",
"2009 arbitrary 1 non-decimal 6 chars 12 in between 1 !!! 6",
"OR collapsed formats: 20090107 120107 (as long as prefixed with zeros)",
"Automatic wday, Thu, detection, 10-01-10 10:01:10 and p format: AM",
"Created on 10-01-11 at 10:01:11 PM")
ymd_hms(tt)
require(sugrrants)
# convert date col to Date format
ff <- flights %>%
mutate(date = time_hour %>% as.Date()) %>%
select(distance,arr_delay,date)
require(nycflights13)
ff <- flights %>%
mutate(date = time_hour %>% as.Date()) %>%
select(distance,arr_delay,date)
# make calendar df
fdf <- frame_calendar(ff,
x = distance,
y = arr_delay,
date = date,
nrow = 5)
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date)) + geom_line() + theme_void()
p %>% prettify() # add calendar text
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,color=arr_delay)) + geom_line() + theme_void()
p %>% prettify() # add calendar text
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date),color=arr_delay) + geom_line() + theme_void()
p %>% prettify() # add calendar text
fdf %>% head
# plot
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,color=.arr_delay)) + geom_line() + theme_void()
p %>% prettify() # add calendar text
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,color=.distance)) + geom_line() + theme_void()
p %>% prettify() # add calendar text
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,color=distance),show.legend=F) + geom_line() + theme_void()
p %>% prettify() # add calendar text
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,color=distance)) + geom_line(show.legend=F) + theme_void()
p %>% prettify() # add calendar text
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,color="purple")) + geom_line(show.legend=F) + theme_void()
p %>% prettify() # add calendar text
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date),color="purple") + geom_line(show.legend=F) + theme_void()
p %>% prettify() # add calendar text
p <- ggplot(fdf,aes(x = distance,
y = arr_delay,
group = date),color="purple") + geom_line(show.legend=F) + theme_void()
p %>% prettify() # add calendar text
p <- ggplot(fdf,aes(x = distance,
y = arr_delay,
group = date)) + geom_line(color="purple",show.legend=F) + theme_void()
p %>% prettify() # add calendar text
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date)) + geom_line(color="purple",show.legend=F) + theme_void()
p %>% prettify() # add calendar text
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date)) + geom_line(aes(color=arr_delay),show.legend=F) + theme_void()
p %>% prettify() # add calendar text
fdf %>% head
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date)) + geom_line(aes(color=date %>% as.factor()),show.legend=F) + theme_void()
p %>% prettify() # add calendar text
fdf %>% head
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,color=arr_delay)) + geom_line(show.legend=F) + theme_void()
p %>% prettify() # add calendar text
fdf$.arr_delay
fdf$.arr_delay %>% summary
fdf <- fdf %>%
mutate(.arr_delay = ifelse(.arr_delay<0,"orange","purple"))
fdf %>% head
fdf <- frame_calendar(ff,
x = distance,
y = arr_delay,
date = date,
nrow = 5)
fdf <- fdf %>%
mutate(colpal = ifelse(.arr_delay<0,"orange","purple"))
fdf %>% head
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,color=colpal)) + geom_line(show.legend=F) + theme_void()
p %>% prettify() # add calendar text
fdf %>% head
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date)) + geom_line(aes(color=colpal),show.legend=F) + theme_void()
p %>% prettify() # add calendar text
colpal
fdf$colpal %>% head
fdf$colpal
fdf$.arr_delay %>% head
fdf$.arr_delay %>% summary
fdf <- frame_calendar(ff,
x = distance,
y = arr_delay,
date = date,
nrow = 5)
fdf <- fdf %>%
mutate(colpal = ifelse(.arr_delay<0.5,"orange","purple"))
# plot
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,
color=colpal)) + geom_line(,show.legend=F) + theme_void()
p %>% prettify() # add calendar text
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,
color=colpal)) + geom_line(show.legend=F) + theme_void()
p %>% prettify() # add calendar text
fdf %>% unique
fdf$colpal %>% unique
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,
color=colpal)) + geom_line(show.legend=T) + theme_void()
p %>% prettify() # add calendar text
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,
color=colpal))
p
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,
color=colpal)) + geom_line(show.legend=T)
p
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date),color=colpal) + geom_line(show.legend=T)
p
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,colour=distance)) + geom_line(show.legend=T) + theme_void()
p %>% prettify() # add calendar text
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,
colour=.distance)) + geom_line(
) + theme_void()
p
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,
colour=arr_delay)) + geom_line(show.legend=T) + theme_void()
p
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,
colour=arr_delay)) +
scale_color_gradient2() +
geom_line(show.legend=F) + theme_void()
p %>% prettify() # add calendar text
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,
colour=arr_delay)) +
scale_color_gradient2() +
geom_line(show.legend=T) + theme_void()
p %>% prettify() # add calendar text
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,
colour=arr_delay)) +
scale_color_gradient() +
geom_line(show.legend=T) + theme_void()
p %>% prettify() # add calendar text
require(colorspace)
fdf <- fdf %>%
mutate(colpal = sequential_hcl(arr_delay))
sequential_hcl(fdf$arr_delay)
colorspace::swatchplot()
colorspace::sequential_hcl(palette = "Purple-Orange"")
)
"
colorspace::sequential_hcl(palette = "Purple-Orange")
fdf <- frame_calendar(ff,
x = distance,
y = arr_delay,
date = date,
nrow = 5)
fdf <- fdf %>%
mutate(colpal = sequential_hcl(arr_delay,"Purple-Orange")
)
fdf <- fdf %>%
mutate(colpal = sequential_hcl(n=arr_delay,"Purple-Orange")
)
fdf <- fdf %>%
mutate(colpal = sequential_hcl(n=arr_delay,"Purple-Orange")
)
fdf <- frame_calendar(ff,
x = distance,
y = arr_delay,
date = date,
nrow = 5)
fdf <- fdf %>%
mutate(colpal = sequential_hcl(n=arr_delay,"Purple-Orange")
)
fdf$arr_delay %>% length
fdf <- fdf %>%
mutate(colpal = sequential_hcl(11,"Purple-Orange")
)
fdf <- fdf %>%
mutate(colpal = sequential_hcl(arr_delay %>% length,"Purple-Orange")
)
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,
colour=colpal)) +
scale_color_gradientn() +
geom_line(show.legend=T) + theme_void()
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date)) +
scale_color_gradientn(colpal) +
geom_line(show.legend=T) + theme_void()
fdf %>% head
fdf$colpal
fdf$colpal %>% unique
ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date)) +
scale_color_gradientn(colpal)
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date)) +
scale_color_gradientn(sequential_hcl(arr_delay %>% length,"Purple-Orange")) +
geom_line(show.legend=T) + theme_void()
ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date)) +
scale_color_gradientn(colours=colpal)
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,
colour=colpal)) +
scale_color_gradientn(colours=colpal)
?scale_color_gradientn
colpal
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,
colour=colpal)) +
scale_color_gradientn(colours=fdf$colpal)
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,
colour=colpal)) +
scale_color_gradientn(colours=fdf$colpal) +
geom_line(show.legend=T) + theme_void()
p %>% prettify() # add calendar text
fdf$colpal
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,
colour=colpal)) +
scale_color_gradientn(colours=magma(200)) +
geom_line(show.legend=T) + theme_void()
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,
colour=colpal)) +
scale_color_gradientn(colours=terrain.colors(200)) +
geom_line(show.legend=T) + theme_void()
p %>% prettify() # add calendar text
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,
# colour=colpal
)) +
scale_color_gradientn(colours=terrain.colors(200)) +
geom_line(show.legend=T) + theme_void()
p %>% prettify() # add calendar text
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,
# colour=colpal
)) +
geom_line(show.legend=T) +
scale_color_gradientn(colours=terrain.colors(200)) +
theme_void()
p %>% prettify() # add calendar text
fdf$colpal %>% unique %>% length
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,
colour=colpal
)) +
geom_line(show.legend=T)
p
ff <- flights %>%
mutate(date = time_hour %>% as.Date()) %>%
select(distance,arr_delay,date)
# make calendar df
fdf <- frame_calendar(ff,
x = distance,
y = arr_delay,
date = date,
nrow = 5)
# plot
p <- ggplot(fdf,aes(x = .distance,
y = .arr_delay,
group = date,
colour=colpal
)) +
geom_line(show.legend=T) +
theme_void()
p %>% prettify() # add calendar text
p <- ggplot(fdf,aes(x = .distance, # new calendar var
y = .arr_delay, # new calendar var
group = date,
colour=arr_delay
)) +
geom_line(show.legend=T) +
theme_void()
p %>% prettify() # add calendar text
rmarkdown::render_site()
pacman::p_load(maps,stringr,leaflet)
# get city names
data(world.cities) # /maps
world_cities <- world.cities
ot <- OlsonNames() %>% str_split_fixed("/",n = 2)  # sep country and cities
ot2 <- ot[,2] %>% str_replace_all("_"," ")
odf <- world_cities %>%
filter(name %in% ot2) %>%
select(lat = lat,
lon = long,
city = name)
# plot
leaflet() %>% addTiles() %>%
addMarkers(lng=odf$lon,lat=odf$lat,
label = paste0(odf$city,"</br>",
"Your current time =", now(), "</br>")) %>% leaflet::addProviderTiles("CartoDB")
# possible time zones to pass to the `tz=""` argument
odf[str_detect(OlsonNames(),ot[,2]),]
odf[complete.cases(odf[str_detect(OlsonNames(),ot[,2]),]),"city"]
pacman::p_load(maps,stringr,leaflet)
# get city names
data(world.cities) # /maps
world_cities <- world.cities
ot <- OlsonNames() %>% str_split_fixed("/",n = 2)  # sep country and cities
ot2 <- ot[,2] %>% str_replace_all("_"," ")
odf <- world_cities %>%
filter(name %in% ot2) %>%
select(lat = lat,
lon = long,
city = name)
# plot
leaflet() %>% addTiles() %>%
addMarkers(lng=odf$lon,lat=odf$lat,
label = paste(odf$city,"</br>",
"Your current time =", now(), "</br>")) %>% leaflet::addProviderTiles("CartoDB")
# possible time zones to pass to the `tz=""` argument
odf[str_detect(OlsonNames(),ot[,2]),]
odf[complete.cases(odf[str_detect(OlsonNames(),ot[,2]),]),"city"]
ot2
ot
ot2
odf <- world_cities %>%
filter(name %in% ot2) %>%
select(lat = lat,
lon = long,
city = name,
tz = now(tzone=ot2))
ot2
now(tzone = ot2)
ot2 %>% class
ot2
ot2[1]
now(tzone = ot2[1])
?now()
ot
now(OlsonNames[1])
now(OlsonNames()[1])
data(world.cities) # /maps
world_cities <- world.cities
ot <- OlsonNames() %>% str_split_fixed("/",n = 2)  # sep country and cities
ot2 <- ot[,2] %>% str_replace_all("_"," ")
odf <- world_cities %>%
filter(name %in% ot2) %>%
select(lat = lat,
lon = long,
city = name,
tz = now(OlsonNames()))
OlsonNames()
now(OlsonNames())
OlsonNames()
now(OlsonNames()[2])
now(OlsonNames()[200])
odf %>% lengths
ot
ot2 %>% str_which(OlsonNames())
OlsonNames() %>% str_which(ot2)
pacman::p_load(maps,stringr,leaflet)
# get city names
data(world.cities) # /maps
world_cities <- world.cities
ot <- OlsonNames() %>% str_split_fixed("/",n = 2)  # sep country and cities
ot2 <- ot[,2] %>% str_replace_all("_"," ")
odf <- world_cities %>%
filter(name %in% ot2) %>%
select(lat = lat,
lon = long,
city = name)
# plot
leaflet() %>% addTiles() %>%
addMarkers(lng=odf$lon,lat=odf$lat,
label = paste("City: ",odf$city) %>% leaflet::addProviderTiles("CartoDB")
# possible time zones to pass to the `tz=""` argument
odf[str_detect(OlsonNames(),ot[,2]),]
pacman::p_load(maps,stringr,leaflet)
# get city names
data(world.cities) # /maps
world_cities <- world.cities
ot <- OlsonNames() %>% str_split_fixed("/",n = 2)  # sep country and cities
ot2 <- ot[,2] %>% str_replace_all("_"," ")
odf <- world_cities %>%
filter(name %in% ot2) %>%
select(lat = lat,
lon = long,
city = name)
# plot
leaflet() %>% addTiles() %>%
addMarkers(lng=odf$lon,lat=odf$lat,
label = paste("City: ",odf$city)) %>% leaflet::addProviderTiles("CartoDB")
# possible time zones to pass to the `tz=""` argument
odf[str_detect(OlsonNames(),ot[,2]),]
odf[complete.cases(odf[str_detect(OlsonNames(),ot[,2]),]),"city"]
rmarkdown::render_site()
node("section") %>% html_nodes("a") %>% html_attr("href")
node("img")  %>% html_attr("src") %>% image_read()
require(dplyr)
node("img") %>% html_attr("src") %>% image_read()
node("img") %>% html_attr("src")
?extract2
url %>% html_nodes("a") %>% extract2(3)
require(rvest)
url %>% html_nodes("a") %>% extract2(3)
url %>% html_nodes("a")
url %>% read_html %>% html_nodes("a")
rmarkdown::render_site()
?read_html
??read_html
rmarkdown::render_site()
