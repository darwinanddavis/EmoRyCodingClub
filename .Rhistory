txt <- readr::read_lines("text.txt") # read in string
txt #
txt %>% str_detect("f") # returns logical if vector contains that pattern
txt %>% str_detect("flower") # returns logical if vector contains that pattern
txt %>% str_detect("bass") # returns logical if vector contains that pattern
txt %>% str_detect("FL")
txt %>% str_detect("[A]")
txt %>% str_detect("[A-Z]")
txt %>% str_detect("[A-z]")
txt %>% str_detect("[u-z]")
txt %>% str_detect("[-z]")
writeLines(txt)
txt
writeLines(txt) %>% class
(txt) %>% class
writeLines(txt)
txt <- readr::read_lines("text.txt") # read in string
txt # print
writeLines(txt) # view raw content
pal
txt %>% as.character(expression())
c("lemon","orange") %>% as.character(expression())
c("lemon","orange") %>% cat(expression())
c("lemon","orange") %>% cat()
c("lemon","orange") %>% expression()
c("lemon","orange") %>% expression() %>% cat
c("lemon","orange") %>% as.expression() %>% cat
c("lemon","orange") %>% expression() %>% cat
c("lemon","orange") %>% cat(expression)
c("lemon","orange") %>% cat(expression())
c("lemon","orange") %>% as.character(expression())
writeLines(txt) # view raw content
paste0('"',txt,'"') %>% cat(sep=",")
txt %>% str_detect("flower") # returns logical if vector contains that pattern
txt %>% str_detect("")
str_which(txt,"flower")
tct %>% str_which("flower") # show which vector the string exists
txt %>% str_which("flower") # show which vector the string exists
txt %>% str_locate("flower") # show which vector the string exists
txt %>% str_locate("flower") # show character positions of the pattern
txt[116]
txt %>% str_locate("flower") # show character positions of the pattern
txt[1][1]
txt[1][1:2]
txt[1][1:115]
txt[[1]][1:115]
txt[[1]][1]
txt[[1]][[1]]
txt[[1]][[1]][1:10]
cat(txt)
cat(txt)[1:11]
cat(txt)[1:10]
txt %>% str_locate("flower") # show character positions of the pattern
str_extract(116)
pat
pat <- "flower"
txt %>% str_detect(pat) # returns logical if vector contains that pattern
txt %>% str_which(pat) # show which vector the pattern exists
txt %>% str_locate(pat) # show character positions of the pattern
txt
txt %>% str_extract(pat)
pat <- "A"
txt %>% str_extract(pat)
pat <- "ZZZ"
txt %>% str_extract(pat)
pat <- "only detracts"
txt %>% str_extract(pat)
pat <- "only subtract"
txt %>% str_extract(pat)
txt
pat <- "sometimes taken"
txt %>% str_detect(pat) # returns logical if vector contains that pattern
txt %>% str_which(pat) # show which vector the pattern exists
txt %>% str_locate(pat) # show character positions of the pattern
txt %>% str_extract(pat)
pat <- "flower"
txt %>% str_extract(pat)
1093470/1000
1093470/1000*2.4
txt %>% str_locate_all(pat)
txt %>% str_sub(1,10)
txt %>% str_sub(116,121)
txt %>% str_sub(110,130) # subset string portion based on char position
tt %>% str_subset(100)
txt %>% str_subset(100)
txt %>% str_subset(pat)
txt %>% str_extract_all(pat, simplify = T)
txt %>% str_extract_all(pat, simplify = F)
txt %>% str_extract_all(pat, simplify = T) # . set simplify = T to return matrix
txt %>% str_extract_all(pat, simplify = F) # . set simplify = T to return matrix
txt %>% str_subset(pat) # return string as char vector containing pattern
txt %>% str_locate_all(pat) # show all positions
txt %>% str_extract(pat, simplify = F) # extract all patterns as string
txt %>% str_extract(pat) # extract all patterns as string
txt %>% str_subset(pat) # return string as char vector containing pattern
txt %>% str_extract(pat) # extract all patterns as string
txt %>% str_sub(110,130) # subset string portion based on char position
txt %>% str_detect(pat) # returns logical if vector contains that pattern
txt %>% str_which(pat) # show which vector the pattern exists
txt %>% str_locate(pat) # show character positions of the first instance of pattern
txt %>% str_locate_all(pat) # show all positions
txt %>% str_extract(pat) # pull pattern out of string
txt %>% str_extract_all(pat, simplify = F) # extract all patterns as string . set simplify = T to return matrix
txt %>% str_match(pat)
txt %>% str_match_all(pat)
txt %>% str_match_all(pat) # extract pattern as matrix
txt %>% str_match(pat) # extract pattern as matrix
txt %>% str_match_all(pat) # extract pattern as matrix
txt %>% str_match(pat) # extract pattern as matrix
txt %>% str_match_all(pat) # extract all pattern instances as matrix
url <- https://r4ds.had.co.nz/strings.html
url <- "https://r4ds.had.co.nz/strings.html"
web_data <- url %>% read_html
?read_html
??read_html
require(xml2)
pacman::p_load(stringr,reprex,xml2)
web_data <- url %>% read_html
web_data
pacman::p_load(stringr,reprex,xml2,rvest)
web_data <- url %>% read_html %>% html_text()
web_data
?html_text()
?html_nodes
url <- paste0(
"https://web.archive.org/web/20190202054736/",
"https://www.boxofficemojo.com/movies/?id=ateam.htm"
)
ateam <- read_html(url)
html_nodes(ateam, "center")
html_nodes(ateam, "center font")
html_nodes(ateam, "center font b")
ateam
url
url <- paste0(
"https://www.boxofficemojo.com/movies/?id=ateam.htm"
)
ateam <- read_html(url)
html_nodes(ateam, "center")
html_nodes(ateam, "center font")
html_nodes(ateam, "center font b")
url <- paste0(
"https://web.archive.org/web/20190202054736/",
"https://www.boxofficemojo.com/movies/?id=ateam.htm"
)
ateam <- read_html(url)
ateam
ateam <- html_text()
ateam %>% html_text()
html_nodes(ateam, "center")
url <- paste0(
# "https://web.archive.org/web/20190202054736/",
"https://www.boxofficemojo.com/movies/?id=ateam.htm"
)
ateam <- read_html(url)
ateam %>% html_text()
url <- paste0(
"https://web.archive.org/web/20190202054736/",
"https://www.boxofficemojo.com/movies/?id=ateam.htm"
)
url
url <- "https://web.archive.org/web/20190202054736/https://www.boxofficemojo.com/movies/?id=ateam.htm"
ateam <- read_html(url)
ateam %>% html_text()
html_nodes(ateam, "center")
html_nodes(ateam, "center font")
html_nodes(ateam, "center font b")
html_nodes(ateam, "left font")
html_nodes(ateam, "center font")
html_nodes(ateam, "right font")
url <- "https://web.archive.org/web/20190202054736/https://www.boxofficemojo.com/movies/?id=ateam.htm"
ateam <- read_html(url)
html_nodes(ateam, "center")
html_nodes(ateam, "center font")
html_nodes(ateam, "center font b")
url <- "https://r4ds.had.co.nz/strings.html"
web_data <- url %>% read_html %>% ?html_text()
web_data <- url %>% read_html %>% html_text()
?html_nodes
writeLines(web_data) # view raw content
url <- "https://r4ds.had.co.nz/strings.html"
web_data <- url %>% read_html %>% html_text()
url <- "https://r4ds.had.co.nz/strings.html"
txt <- url %>% read_html %>% html_text()
writeLines(txt) %>% head# view raw content
txt
writeLines(txt) %>% str # view raw content
writeLines(txt) %>% summary # view raw content
txt %>% str
txt %>% summary
txt %>% summary %>% str
txt %>% summary %>% table
txt %>% table %>% summary
txt %>% table
txt %>% summary
txt %>% str
writeLines(txt) %>% head(1) # view raw content
writeLines(txt)[1] # view raw content
```{r, eval=T}
txt %>% cat
txt %>% print
txt[1]
txt[2]
txt %>% class
txt <- url %>% read_html %>% html_text() # read in
txt %>% class
txt %>% str
writeLines(txt)[2] # view raw content
writeLines(txt)[3] # view raw content
str_wrap(txt,200)
str_wrap(txt,20)
str_view_all(txt,NA)
str_view_all(txt,"")
txt %>% str_sub(1,50)
txt %>% str_sub(1,500)
txt %>% str_sub(1,1000) # visualise the first 1000 lines
url <- "https://r4ds.had.co.nz/strings.html"
txt <- url %>% read_html %>% html_text() # read in
txt %>% str
txt %>% str_sub(1,1000) # visualise the first 1000 lines
txt
txt %>% str_sub(1,2000) # visualise the first 1000 lines
txt %>% str_view_all(str_sub(1,1000))  # visualise the first 1000 characters
txt %>% str_view_all(str_sub(1,100))  # visualise the first 1000 characters
txt %>% str_sub(1,100) %>% str_view_all("")  # visualise the first 1000 characters
txt %>% str_sub(1,100) %>% str_view_all(" ")  # visualise the first 1000 characters
txt %>% str_sub(1,100) %>% str_view_all(".")  # visualise the first 1000 characters
txt %>% str_sub(1,100) %>% str_view_all(" ")  # visualise the first 1000 characters
txt %>% str_sub(1,100) %>% str_view_all("")  # visualise the first 1000 characters
txt %>% str_sub(1,100) %>% str_view("")  # visualise the first 1000 characters
txt %>% str_sub(1,100) %>% str_view(" ")  # visualise the first 1000 characters
txt %>% str_sub(1,1000) %>% str_view(" ")  # visualise the first 1000 characters
txt %>% str_sub(1,1000)
txt %>% str_sub(1,1000) %>% str_view(" ")
pat <- "strings" # string pattern to search for
txt %>% str_detect(pat) # returns logical if vector contains that pattern
txt %>% str_which(pat) # show which vector the pattern exists
txt %>% str_locate(pat) # show character positions of the first instance of pattern
txt %>% str_locate_all(pat) # show all positions
txt %>% print
txt %>% str_sub(110,130) # subset string portion based on char position
txt %>% str_sub(
txt %>% str_locate(pat)
)
txt %>% str_subset(pat) # return string as char vector containing pattern
pat
txt %>% str_subset(pat) # return string as char vector containing pattern
txt %>% str_extract(pat) # pull pattern out of string
txt %>% str_extract_all(pat, simplify = F) # extract all patterns as string . set simplify = T to return matrix
txt %>% str_match(pat) # extract pattern as matrix
txt %>% str_match_all(pat) # extract all pattern instances as matrix
txt %>% str_split(pat,n = Inf)
txt_split <- txt %>% str_split(pat,n = Inf)
txt_split %>% str
txt_split <- txt %>% str_split(pat)
txt_split %>% str
txt_split <- txt %>% str_split(pat,n = Inf)
pat
txt_split <- txt %>% str_split(pat,n = Inf)
txt_split %>% str
?str_split
txt_split <- txt %>% str_split_fixed(pat,n = Inf)
txt_split %>% str
txt_split
txt_split[1,1]
txt_split[1,2]
txt_split[1,3]
txt_split[2,2]
txt_split[2,3]
txt_split[1,10]
txt_split[1,2] # view
txt_split %>% class
txt_split %>% dim
txt_split %>% str
txt_split <- txt %>% str_split_fixed(pat, n = Inf)
txt_split %>% dim # get dimensions of matrix
txt_split %>% str
txt_split[1,2] # view first row
txt_split[1,3] # view first row
txt_split %>% summary
txt_split %>% table
txt_split %>% head
txt_split %>% dim # get dimensions of matrix
txt_split[1,3] # view 1st row and 3rd column
txt_split[1,20] # view 1st row and 3rd column
txt_split %>% map(str_view_all("data"))
require(purrr)
txt_split %>% map(str_view_all("data"))
txt_split %>% map(str_view_all("data",""))
txt_split %>% str_view_all("data","")
pat <- "strings"
replace
repl
repl <- "plants"
txt %>% str_replace(fixed(" "),repl)
txt
txt %>% str_replace(" ",repl)
txt %>% str_replace_all(" ",repl)
txt %>% str_replace_all(pat,repl)
pat
txt %>% str_replace_all(pat,repl)
pat <- "Strings"
repl <- "plants"
txt %>% str_replace_all(pat,repl)
pat <- c("strings","Strings")
repl <- "plants"
txt %>% str_replace_all(pat,repl)
pat <- c("strings","Strings")
repl <- "plants"
txt %>% str_replace_all(pat,repl)
pat <- c("strings")
pat <- "strings"
repl <- "plants"
txt %>% str_replace_all(pat,repl)
pat <- "strings"
repl <- "plants"
txt %>% str_replace_all(pat,repl)
require(xml2)# read html data
require(rvest) # select html elements
url <- "https://r4ds.had.co.nz/strings.html"
txt <- url %>% read_html %>% html_text() # read in web text
txt %>% str
pat <- "strings" # string pattern to search for
txt %>% str_detect(pat) # returns logical if vector contains that pattern
pacman::p_load(stringr,reprex,xml2,rvest)
pat <- "strings" # string pattern to search for
txt %>% str_detect(pat) # returns logical if vector contains that pattern
txt %>% str_which(pat) # show which vector the pattern exists
txt %>% str_locate(pat) # show character positions of the first instance of pattern
txt %>% str_locate_all(pat) # show all positions
txt %>% str_sub(
txt %>% str_locate(pat) # use positions from above func
)
txt %>% str_subset(pat)
txt %>% str_extract(pat) # pull pattern out of string
txt %>% str_extract_all(pat, simplify = F) # extract all patterns as string . set simplify = T to return matrix
txt %>% str_match(pat) # extract pattern as matrix
txt %>% str_match_all(pat) # extract all pattern instances as matrix
txt %>% str_sub(1,1000) %>%
str_view(" ")
pat <- "strings"
txt_split <- txt %>% str_split_fixed(pat, n = Inf)
txt_split %>% dim # get dimensions of matrix
txt_split[1,20] # view 1st row and 3rd column
repl <- "plants that make you smile" # replacement string
txt %>% str_replace_all(pat,repl)
?stri_replace_all_charclass
txt_split[2]
txt_split[2] str_dup(2)
txt_split[2] %>% str_dup(2)
txt_split[3] %>% str_dup(2)
txt_split[10] %>% str_dup(2)
txt_split[10] %>% str_dup(10) # duplicate string n number of times (10)
txt_split[4] %>% str_dup(10) # duplicate string n number of times (10)
txt_split[5] %>% str_dup(10) # duplicate string n number of times (10)
txt_split[6] %>% str_dup(10) # duplicate string n number of times (10)
txt_split[5] %>% str_dup(10) # duplicate string n number of times (10)
txt %>% str_length()
str_view_all("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas Current schistosome control strategies target either the intermediate snail host or humans", "[C]")
txt %>% str_wrap(width = 20) %>% reprex(venue = "gh")
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas Current schistosome control strategies target either the intermediate snail host or humans",width = 20) %>% reprex(venue = "gh")
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas Current schistosome control strategies target either the intermediate snail host or humans",width = 20) %>% reprex()
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas Current schistosome control strategies target either the intermediate snail host or humans",width = 20)
?reprex
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas Current schistosome control strategies target either the intermediate snail host or humans",width = 20) %>% reprex(venue = "html")
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas Current schistosome control strategies target either the intermediate snail host or humans",width = 200) %>% reprex(venue = "html")
str_wrap_all("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas Current schistosome control strategies target either the intermediate snail host or humans",width = 200) %>% reprex(venue = "html")
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas Current schistosome control strategies target either the intermediate snail host or humans",width = 200) %>% reprex(venue = "html")
txt %>% str_replace(" ","")
txt %>% str_replace("_","")
txt %>% str_replace("14","")
txt %>% str_replace(" ","")
txt %>% str_replace_all(" ","")
txt_split[2]
txt_split[1]
txt_split[5]
txt_split[5] %>% str_replace_all(" ","")
txt_s <- txt_split[5]
txt_s %>% str_replace_all(" ","")
txt_s %>% str_trim()
txt_s %>% str_trunc(3)
txt_s %>% str_trunc(5)
txt_s %>% str_trunc(1)
txt_s %>% str_trunc(100)
txt_s
txt_s %>% str_trunc(2)
txt_s %>% str_trunc(3)
txt_s %>% str_trunc(4)
txt_s %>% str_trunc(5)
txt_s
txt_s %>% str_trunc(8)
txt_s %>% str_trunc(10)
txt_s %>% str_trim(side="both")
txt_s
txt_s %>% str_replace_all(" ","")
require(stringi)
txt_s %>% stri_replace_all_charclass("\\p{WHITE_SPACE}","") # remove middle white space
txt_s %>% str_replace_all(" ","") # remove all spaces
txt_s %>% str_replace_na()
?str_replace_na()
txt_s %>% str_replace_all(pat,repl)
txt %>% str_replace_all(pat,repl)
txt_s %>% str_replace_all(pat,repl)
txt_s <- txt_split[5]
txt_s %>% str_dup(10) # duplicate string n number of times (10)
txt_s %>% str_replace_all(" ","") # remove all spaces
txt_s %>% str_trim(side="both") # strip white space from both ends
txt_s %>% str_trunc(10)
txt %>% str_trunc(1000)
vect <- 1000
str_interp("For including vectors like this ${vect} when you can't break the character strng")
str_interp("<div style=\"color:#F90F40;\"> <strong> Total cases </strong> ${vect}")
str_interp("First value, ${v1}, Second value, ${v2*2}.",
list(v1 = 10, v2 = 20)
)
str_interp(
"Values are $[.2f]{max(Sepal.Width)} and $[.2f]{min(Sepal.Width)}.",
iris
)
str_interp(
"Values are $[.2f]{max(Sepal.Width)} and $[.2f]{min(Sepal.Width)}.",
iris
)
string <- "Some, TEXT,"
string %>% str_match("E") # return as matrix
string %>% str_split_fixed(", ",2) # split based on pattern
txt %>% str_sub(1,1000) %>%
str_view("[")
txt %>% str_sub(1,1000) %>%
str_view("|")
txt %>% str_sub(1,1000) %>%
str_view(" ")
txt_s
pat <- "strings" # string pattern to search for
txt %>% str_detect(pat) # returns logical if vector contains that pattern
txt %>% str_which(pat) # show which vector the pattern exists
txt %>% str_detect(fixed(pat)) # returns logical if vector contains that pattern
txt %>% str_detect(pat) # returns logical if vector contains that pattern
repl <- "when you really need that coffee hit" # replacement character string
txt %>% str_replace_all(pat,repl)
pat
pat_all <- regex(pat, ignore_case = T)
pat_all
repl <- "when you really need that coffee hit" # replacement character string
txt %>% str_replace_all(pat_all,repl)
repl <- "when you really need that coffee hit" # replacement character string
txt %>% str_replace_all(pat,repl)
txt_s %>% str_replace_all(pat,repl)
txt %>% str_replace_all(pat,repl)
pat_all <- regex(pat, ignore_case = T)
pat_all
repl <- "when you really need that coffee hit" # replacement character string
txt %>% str_replace_all(pat_all,repl)
txt %>% str_trunc(1000) # munst be greater than 3 as this is the length of the ellipsis
txt_short <- txt %>% str_trunc(1000) # munst be greater than 3 as this is the length of the ellipsis
txt_short %>% str_subset(pat)
pat
txt_short <- txt %>% str_trunc(2000) # munst be greater than 3 as this is the length of the ellipsis
txt_short
txt_short %>% str_subset(pat)
txt_short <- txt %>% str_trunc(1000) # munst be greater than 3 as this is the length of the ellipsis
txt_short
txt_short %>% str_replace_all(pat,repl)
txt %>% str_replace_all(pat,repl)
txt_s
txt_s %>% str_replace_all(pat,repl)
txt %>% str_sub(
txt %>% str_locate(pat) # use positions from above func
)
txt %>% str_locate_all(pat) # show all positions
txt %>%
str_locate(pat)
str_replace_all(pat,repl)
txt %>%
str_locate(pat)
txt %>%
str_locate_all(pat)
txt %>%
str_locate(pat) %>% unlist
txt %>%
str_locate(pat) %>% unfactor
txt %>%
str_locate(pat)[1,1]
txt %>%
str_locate(pat)[1,]
txt %>%
str_locate(pat) %>% class
txt %>%
str_locate(pat)
txt %>%
str_locate(pat)[1,]
txt %>%
str_locate(pat)[1,1]
txt %>%
str_replace_all(pat,repl)
pat_all <- regex(pat, ignore_case = T)
pat_all
txt %>% str_replace_all(pat_all,repl)
str_interp(
"Values are $[.2f]{max(Sepal.Width)} and $[.2f]{min(Sepal.Width)}.",
iris
)
txt_short <- txt %>% str_trunc(2000) # munst be greater than 3 as this is the length of the ellipsis
txt_short
rmarkdown::render_site()
rmarkdown::render("Lesson5_rmd.Rmd", output_format = "pdf_document")
require(tinytex)
rmarkdown::render("Lesson5_rmd.Rmd", output_format = "pdf_document")
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()  # update LaTeX package
rmarkdown::render("Lesson5_rmd.Rmd", output_format = "pdf_document")
tinytex::reinstall_tinytex()
