addMarkers(latlon[2],latlon[1],label=ecc_label,popup=ecc_popup)
require(leaflet)
require(dplyr)
custom_tile <- "http://b.sm.mapstack.stamen.com/((mapbox-water,$f2f7ff[hsl-color]),(positron,$f2f7ff[hsl-color]),(buildings,$f2f7ff[hsl-color]),(parks,$2c403b[hsl-color]))/{z}/{x}/{y}.png"
latlon <- c(33.79667, -84.32346) # emory
ecc_label <- "Room 2052, Wayne Rollins Building"
ecc_popup <- "Take the elevator to the second floor, \nthen exit left and take the first left."
map <- leaflet() %>%  # initiate the leaflet map object
setView(latlon[2],latlon[1],zoom=15) %>%
addTiles(custom_tile) %>%  # add map tiles to the leaflet object
addMarkers(latlon[2],latlon[1],label=ecc_label,popup=ecc_popup)
map
colour_var <- "class"
facet_var <- "drv"
ggplot(mpg) +
geom_point(aes(displ, hwy, colour = .data[[colour_var]])) +
facet_wrap(vars(.data[[facet_var]]))
require(ggplot2)
ggplot(mpg) +
geom_point(aes(displ, hwy, colour = .data[[colour_var]])) +
facet_wrap(vars(.data[[facet_var]]))
ggplot(mpg) +
geom_point(aes(displ, hwy, colour = colour_var)) +
facet_wrap(vars(facet_var))
colour_var <- "class"
ggplot(mpg) +
geom_point(aes(displ, hwy, colour = colour_var)) +
facet_wrap(vars(facet_var))
my_theme <- theme_classic()
my_theme <- + theme_classic()
my_theme <- `+ theme_classic()`
my_theme <- `+` theme_classic()
my_theme <- theme_classic()
ggplot(mpg) +
geom_point(aes(displ, hwy, colour = colour_var)) +
facet_wrap(vars(facet_var)) + my_theme
ggplot(mpg) +
geom_point(aes(displ, hwy, colour = .data[[colour_var]])) +
facet_wrap(vars(.data[[facet_var]])) + my_theme
1,613.69 /2
1613.69 /2
1550/2
1556/2
1618/2
1,618.76 / 2
1618.76 / 2
1556/2
pacman::p_load("stringr")
require(stringr)
stringr::str_view("SFHDIKNDFKGFHelloDFFDGWorld","Hello World")
stringr::str_view("SFHDIKNDFKGFHelloDFFDGWorld","[Hello W]")
stringr::str_view("SFHDIKNDFKGFHelloDFFDGWorld","[HW]")
stringr::str_view("SFHDIKNDFKGFHelloDFFDGWorld","[aeiou]")
str_wrap("Figure 1. Simulation model outputs showing failure and success of varying predator density (N m–2) for projected snail host density (N L–1, purple solid line), human-infectious cercariae density (N 0.1 L–1, red line), resource density (mg C L–1, green line), and infected snail host density (N L–1, purple dashed line) for logistically growing periphyton algae (r = 0.25 d–1) over the 150-day transmission season: A) pred = 0 N m–2, B) pred = 10 N m–2, and C) 13 N m–2. D) Cumulative human-infectious cercariae density (N L) for predator densities 0, 0.1, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, and 20 N m–2. Letters represent cumulative cercariae density for top panel figures. Baseline host mortality rate hb = 0.001 d–1.". 20)
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas.Current schistosome control strategies target either the intermediate snail host or humans, but as sustainable, long-term control methods are constrained by high economic and/or environmental costs. For example, mass drug administration (MDA), such as administering praziquantel, relies on extensive monitoring to evaluate success (Gurarie et al. 2015), while chemical programs, such as mollusciciding, incur high environmental costs (Coelho and Caldeira 2016) and rely of precise timing and careful intervention (MalCiv in review). The measured success from the combined strengths of these two methods is still in its infancy (Lo et al. 2018), presenting opportunities to test and introduce alternatives.
", 20)
require(regrex)
require(regex)
require(reprex)
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas.Current schistosome control strategies target either the intermediate snail host or humans, but as sustainable, long-term control methods are constrained by high economic and/or environmental costs. For example, mass drug administration (MDA), such as administering praziquantel, relies on extensive monitoring to evaluate success (Gurarie et al. 2015), while chemical programs, such as mollusciciding, incur high environmental costs (Coelho and Caldeira 2016) and rely of precise timing and careful intervention (MalCiv in review). The measured success from the combined strengths of these two methods is still in its infancy (Lo et al. 2018), presenting opportunities to test and introduce alternatives. ", 20)
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas.Current schistosome control strategies target either the intermediate snail host or humans, but as sustainable, long-term control methods are constrained by high economic and/or environmental costs. For example, mass drug administration (MDA), such as administering praziquantel, relies on extensive monitoring to evaluate success (Gurarie et al. 2015), while chemical programs, such as mollusciciding, incur high environmental costs (Coelho and Caldeira 2016) and rely of precise timing and careful intervention (MalCiv in review). The measured success from the combined strengths of these two methods is still in its infancy (Lo et al. 2018), presenting opportunities to test and introduce alternatives. ", 20) %>%
reprex()
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas.Current schistosome control strategies target either the intermediate snail host or humans, but as sustainable, long-term control methods are constrained by high economic and/or environmental costs. For example, mass drug administration (MDA), such as administering praziquantel, relies on extensive monitoring to evaluate success (Gurarie et al. 2015), while chemical programs, such as mollusciciding, incur high environmental costs (Coelho and Caldeira 2016) and rely of precise timing and careful intervention (MalCiv in review). The measured success from the combined strengths of these two methods is still in its infancy (Lo et al. 2018), presenting opportunities to test and introduce alternatives.", 20) %>%
reprex()
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas.Current schistosome control strategies target either the intermediate snail host or humans, but as sustainable, long-term control methods are constrained by high economic and/or environmental costs. For example, mass drug administration (MDA), such as administering praziquantel, relies on extensive monitoring to evaluate success (Gurarie et al. 2015), while chemical programs, such as mollusciciding, incur high environmental costs (Coelho and Caldeira 2016) and rely of precise timing and careful intervention (MalCiv in review). The measured success from the combined strengths of these two methods is still in its infancy (Lo et al. 2018), presenting opportunities to test and introduce alternatives.", 20) %>%
reprex()
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas.Current schistosome control strategies target either the intermediate snail host or humans, but as sustainable, long-term control methods are constrained by high economic and/or environmental costs. For example, mass drug administration (MDA), such as administering praziquantel, relies on extensive monitoring to evaluate success (Gurarie et al. 2015), while chemical programs, such as mollusciciding, incur high environmental costs (Coelho and Caldeira 2016) and rely of precise timing and careful intervention (MalCiv in review). The measured success from the combined strengths of these two methods is still in its infancy (Lo et al. 2018), presenting opportunities to test and introduce alternatives.", 20)
pp <- str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas.Current schistosome control strategies target either the intermediate snail host or humans, but as sustainable, long-term control methods are constrained by high economic and/or environmental costs. For example, mass drug administration (MDA), such as administering praziquantel, relies on extensive monitoring to evaluate success (Gurarie et al. 2015), while chemical programs, such as mollusciciding, incur high environmental costs (Coelho and Caldeira 2016) and rely of precise timing and careful intervention (MalCiv in review). The measured success from the combined strengths of these two methods is still in its infancy (Lo et al. 2018), presenting opportunities to test and introduce alternatives.", 20)
pp %>% reprex
pp
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas.Current schistosome control strategies target either the intermediate snail host or humans", 20) %>%
reprex()
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas Current schistosome control strategies target either the intermediate snail host or humans", 20) %>%
reprex()
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas Current schistosome control strategies target either the intermediate snail host or humans", 20) %>%
reprex(venue = gh)
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas Current schistosome control strategies target either the intermediate snail host or humans", 20) %>%
reprex(venue = "gh")
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas Current schistosome control strategies target either the intermediate snail host or humans", 20) %>% class
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas Current schistosome control strategies target either the intermediate snail host or humans", width = 20)
reprex(venue = "gh")
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas Current schistosome control strategies target either the intermediate snail host or humans", width = 20) %>%
reprex(venue = "gh")
str_view_all("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas Current schistosome control strategies target either the intermediate snail host or humans", "[Csch")
str_view_all("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas Current schistosome control strategies target either the intermediate snail host or humans", "[Csch]")
str_view_all("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas Current schistosome control strategies target either the intermediate snail host or humans", "[C]")
rmarkdown::render_site()
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas Current schistosome control strategies target either the intermediate snail host or humans", width = 20) %>%
reprex(venue = "gh")
# split data into list elements by every 'XX' character
# apply string function to each new element using map
stringr::str_view("SFHDIKNDFKGFHelloDFFDGWorld","[aeiou]")
total_cases <- c(10,20,50)
str_interp("<strong> Total cases </strong> ${total_cases}")
require(stringr)
str_interp("<strong> Total cases </strong> ${total_cases}")
str_interp("Total cases = ${total_cases}")
str_interp("Total cases = ${total_cases}") %>% str_view()
total_cases <- 1000
str_interp("Total cases = ${total_cases}")
vec <- 1000
vec
vect <- 1000
str_interp("For including vectors like this ${vect} when you can't break the character strng")
str_interp("First value, ${value1}, Second value, ${value2*2}.",
list(v1 = 10, v2 = 20)
)
str_interp("First value, ${v1}, Second value, ${v2*2}.",
list(v1 = 10, v2 = 20)
)
str_interp("<div style=\"color:#F90F40;\"> <strong> Total cases </strong> ${cv_total_cases}")
str_interp("<div style=\"color:#F90F40;\"> <strong> Total cases </strong> ${vect}")
devtools::has_devel()
para <- readr::read_csv("text.txt") # read in string
txt <- readr::read_csv("text.txt") # read in string
print(xtx)
print(txt)
txt
str_view_all(txt) # display 2
require(stringr)
require(reprex) # for rendering text string in HTML
str_view_all(txt) # display 2
str_view(txt)
str_view(txt,"")
str_view_all(txt,"")
str_view(txt,"a")
txt %>% str_detect("flo")
txt %>% str_detect("a")
txt
txt %>% str_detect("beaut")
str_view("SFHDIKNDFKGFHelloDFFDGWorld","[aeiou]")
txt %>% split()
?split()
txt %>% str_split_fixed()
txt %>% str_split_fixed(2)
txt %>% str_split_fixed("beau")
?str_split_fixed
txt %>% ?str_split_fixed("beau",n = 2)
txt %>% str_split_fixed("beau",n = 2)
txt %>% str_split_fixed("flower",n = 2)
txt %>% str_split_fixed("flower",n = 5)
txt %>% str_split_fixed("flower",n = Inf)
txt %>% str_split("flower",n = Inf)
txt %>% str_wrap(width = 20) %>%
reprex(venue = "gh")
txt %>% str_wrap(width = 20)
txt %>% str_wrap(width = 20) %>%reprex(venue = "gh")
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas Current schistosome control strategies target either the intermediate snail host or humans",width = 20) %>%reprex(venue = "gh")
str_wrap_all("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas Current schistosome control strategies target either the intermediate snail host or humans",width = 20) %>%reprex(venue = "gh")
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas Current schistosome control strategies target either the intermediate snail host or humans",width = 20)
str_wrap("The prevailing challenges of effective schistosomiasis control suggest the need for new ideas Current schistosome control strategies target either the intermediate snail host or humans",width = 20) %>%reprex()
vect <- 1000
str_interp("For including vectors like this ${vect} when you can't break the character strng")
# Useful when breaking character quotes e.g. HTML tags
str_view(txt,NA)
str_view(txt,"")
str_view_all(txt) # display 2
txt <- readr::read_csv("text.txt") # read in string
print(txt) # display 1
str_view_all(txt) # display 2
print(txt) # display 1
txt
txt <- readr::read_txt("text.txt") # read in string
txt <- readr::read_delim("text.txt") # read in string
txt <- readr::read_delim("text.txt","") # read in string
txt <- readr::read_lines("text.txt") # read in string
print(txt) # display 1
str_view(txt,"")
str_view_all(txt) # display 2
str_view(txt," ")
txt
print(txt) # display 1
txt # display 1
str_view(txt," ") # display 2
str_view(txt,",") # display 2
txt <- readr::read_lines("text.txt") # read in string
txt
txt %>% str_detect("flower")
str_detect(txt,"flower")
str_detect(txt,"f")
str_detect(txt,"fl")
str_detect(txt,"flower")
str_detect(txt,"r")
str_detect(txt,"")
str_detect(txt,",")
str_detect(txt,"AAA")
str_detect(txt,"A")
str_which(txt,"A")
str_which(txt,"fri")
str_which(txt,"At")
txt %>% str_detect("flower")
txt %>% class
txt <- readr::read_lines("text.txt","/n") # read in string
txt <- readr::read_lines("text.txt") # read in string
txt # data are separated into three vectors by line breaks
txt %>% str_detect("flower") # returns logical if vector contains that pattern
txt %>% str_detect("fl") # returns logical if vector contains that pattern
txt %>% str_detect("f") # returns logical if vector contains that pattern
txt <- readr::read_lines("text.txt") # read in string
txt #
txt %>% str_detect("f") # returns logical if vector contains that pattern
txt %>% str_detect("flower") # returns logical if vector contains that pattern
txt %>% str_detect("bass") # returns logical if vector contains that pattern
txt %>% str_detect("FL")
txt %>% str_detect("[A]")
txt %>% str_detect("[A-Z]")
txt %>% str_detect("[A-z]")
txt %>% str_detect("[u-z]")
txt %>% str_detect("[-z]")
writeLines(txt)
txt
writeLines(txt) %>% class
(txt) %>% class
writeLines(txt)
txt <- readr::read_lines("text.txt") # read in string
txt # print
writeLines(txt) # view raw content
pal
txt %>% as.character(expression())
c("lemon","orange") %>% as.character(expression())
c("lemon","orange") %>% cat(expression())
c("lemon","orange") %>% cat()
c("lemon","orange") %>% expression()
c("lemon","orange") %>% expression() %>% cat
c("lemon","orange") %>% as.expression() %>% cat
c("lemon","orange") %>% expression() %>% cat
c("lemon","orange") %>% cat(expression)
c("lemon","orange") %>% cat(expression())
c("lemon","orange") %>% as.character(expression())
writeLines(txt) # view raw content
paste0('"',txt,'"') %>% cat(sep=",")
txt %>% str_detect("flower") # returns logical if vector contains that pattern
txt %>% str_detect("")
str_which(txt,"flower")
tct %>% str_which("flower") # show which vector the string exists
txt %>% str_which("flower") # show which vector the string exists
txt %>% str_locate("flower") # show which vector the string exists
txt %>% str_locate("flower") # show character positions of the pattern
txt[116]
txt %>% str_locate("flower") # show character positions of the pattern
txt[1][1]
txt[1][1:2]
txt[1][1:115]
txt[[1]][1:115]
txt[[1]][1]
txt[[1]][[1]]
txt[[1]][[1]][1:10]
cat(txt)
cat(txt)[1:11]
cat(txt)[1:10]
txt %>% str_locate("flower") # show character positions of the pattern
str_extract(116)
pat
pat <- "flower"
txt %>% str_detect(pat) # returns logical if vector contains that pattern
txt %>% str_which(pat) # show which vector the pattern exists
txt %>% str_locate(pat) # show character positions of the pattern
txt
txt %>% str_extract(pat)
pat <- "A"
txt %>% str_extract(pat)
pat <- "ZZZ"
txt %>% str_extract(pat)
pat <- "only detracts"
txt %>% str_extract(pat)
pat <- "only subtract"
txt %>% str_extract(pat)
txt
pat <- "sometimes taken"
txt %>% str_detect(pat) # returns logical if vector contains that pattern
txt %>% str_which(pat) # show which vector the pattern exists
txt %>% str_locate(pat) # show character positions of the pattern
txt %>% str_extract(pat)
pat <- "flower"
txt %>% str_extract(pat)
1093470/1000
1093470/1000*2.4
txt %>% str_locate_all(pat)
txt %>% str_sub(1,10)
txt %>% str_sub(116,121)
txt %>% str_sub(110,130) # subset string portion based on char position
tt %>% str_subset(100)
txt %>% str_subset(100)
txt %>% str_subset(pat)
txt %>% str_extract_all(pat, simplify = T)
txt %>% str_extract_all(pat, simplify = F)
txt %>% str_extract_all(pat, simplify = T) # . set simplify = T to return matrix
txt %>% str_extract_all(pat, simplify = F) # . set simplify = T to return matrix
txt %>% str_subset(pat) # return string as char vector containing pattern
txt %>% str_locate_all(pat) # show all positions
txt %>% str_extract(pat, simplify = F) # extract all patterns as string
txt %>% str_extract(pat) # extract all patterns as string
txt %>% str_subset(pat) # return string as char vector containing pattern
txt %>% str_extract(pat) # extract all patterns as string
txt %>% str_sub(110,130) # subset string portion based on char position
txt %>% str_detect(pat) # returns logical if vector contains that pattern
txt %>% str_which(pat) # show which vector the pattern exists
txt %>% str_locate(pat) # show character positions of the first instance of pattern
txt %>% str_locate_all(pat) # show all positions
txt %>% str_extract(pat) # pull pattern out of string
txt %>% str_extract_all(pat, simplify = F) # extract all patterns as string . set simplify = T to return matrix
txt %>% str_match(pat)
txt %>% str_match_all(pat)
txt %>% str_match_all(pat) # extract pattern as matrix
txt %>% str_match(pat) # extract pattern as matrix
txt %>% str_match_all(pat) # extract pattern as matrix
txt %>% str_match(pat) # extract pattern as matrix
txt %>% str_match_all(pat) # extract all pattern instances as matrix
url <- https://r4ds.had.co.nz/strings.html
url <- "https://r4ds.had.co.nz/strings.html"
web_data <- url %>% read_html
?read_html
??read_html
require(xml2)
pacman::p_load(stringr,reprex,xml2)
web_data <- url %>% read_html
web_data
pacman::p_load(stringr,reprex,xml2,rvest)
web_data <- url %>% read_html %>% html_text()
web_data
?html_text()
?html_nodes
url <- paste0(
"https://web.archive.org/web/20190202054736/",
"https://www.boxofficemojo.com/movies/?id=ateam.htm"
)
ateam <- read_html(url)
html_nodes(ateam, "center")
html_nodes(ateam, "center font")
html_nodes(ateam, "center font b")
ateam
url
url <- paste0(
"https://www.boxofficemojo.com/movies/?id=ateam.htm"
)
ateam <- read_html(url)
html_nodes(ateam, "center")
html_nodes(ateam, "center font")
html_nodes(ateam, "center font b")
url <- paste0(
"https://web.archive.org/web/20190202054736/",
"https://www.boxofficemojo.com/movies/?id=ateam.htm"
)
ateam <- read_html(url)
ateam
ateam <- html_text()
ateam %>% html_text()
html_nodes(ateam, "center")
url <- paste0(
# "https://web.archive.org/web/20190202054736/",
"https://www.boxofficemojo.com/movies/?id=ateam.htm"
)
ateam <- read_html(url)
ateam %>% html_text()
url <- paste0(
"https://web.archive.org/web/20190202054736/",
"https://www.boxofficemojo.com/movies/?id=ateam.htm"
)
url
url <- "https://web.archive.org/web/20190202054736/https://www.boxofficemojo.com/movies/?id=ateam.htm"
ateam <- read_html(url)
ateam %>% html_text()
html_nodes(ateam, "center")
html_nodes(ateam, "center font")
html_nodes(ateam, "center font b")
html_nodes(ateam, "left font")
html_nodes(ateam, "center font")
html_nodes(ateam, "right font")
url <- "https://web.archive.org/web/20190202054736/https://www.boxofficemojo.com/movies/?id=ateam.htm"
ateam <- read_html(url)
html_nodes(ateam, "center")
html_nodes(ateam, "center font")
html_nodes(ateam, "center font b")
url <- "https://r4ds.had.co.nz/strings.html"
web_data <- url %>% read_html %>% ?html_text()
web_data <- url %>% read_html %>% html_text()
?html_nodes
writeLines(web_data) # view raw content
url <- "https://r4ds.had.co.nz/strings.html"
web_data <- url %>% read_html %>% html_text()
url <- "https://r4ds.had.co.nz/strings.html"
txt <- url %>% read_html %>% html_text()
writeLines(txt) %>% head# view raw content
txt
writeLines(txt) %>% str # view raw content
writeLines(txt) %>% summary # view raw content
txt %>% str
txt %>% summary
txt %>% summary %>% str
txt %>% summary %>% table
txt %>% table %>% summary
txt %>% table
txt %>% summary
txt %>% str
writeLines(txt) %>% head(1) # view raw content
writeLines(txt)[1] # view raw content
```{r, eval=T}
txt %>% cat
txt %>% print
txt[1]
txt[2]
txt %>% class
txt <- url %>% read_html %>% html_text() # read in
txt %>% class
txt %>% str
writeLines(txt)[2] # view raw content
writeLines(txt)[3] # view raw content
str_wrap(txt,200)
str_wrap(txt,20)
str_view_all(txt,NA)
str_view_all(txt,"")
txt %>% str_sub(1,50)
txt %>% str_sub(1,500)
txt %>% str_sub(1,1000) # visualise the first 1000 lines
url <- "https://r4ds.had.co.nz/strings.html"
txt <- url %>% read_html %>% html_text() # read in
txt %>% str
txt %>% str_sub(1,1000) # visualise the first 1000 lines
txt
txt %>% str_sub(1,2000) # visualise the first 1000 lines
txt %>% str_view_all(str_sub(1,1000))  # visualise the first 1000 characters
txt %>% str_view_all(str_sub(1,100))  # visualise the first 1000 characters
txt %>% str_sub(1,100) %>% str_view_all("")  # visualise the first 1000 characters
txt %>% str_sub(1,100) %>% str_view_all(" ")  # visualise the first 1000 characters
txt %>% str_sub(1,100) %>% str_view_all(".")  # visualise the first 1000 characters
txt %>% str_sub(1,100) %>% str_view_all(" ")  # visualise the first 1000 characters
txt %>% str_sub(1,100) %>% str_view_all("")  # visualise the first 1000 characters
txt %>% str_sub(1,100) %>% str_view("")  # visualise the first 1000 characters
txt %>% str_sub(1,100) %>% str_view(" ")  # visualise the first 1000 characters
txt %>% str_sub(1,1000) %>% str_view(" ")  # visualise the first 1000 characters
txt %>% str_sub(1,1000)
txt %>% str_sub(1,1000) %>% str_view(" ")
pat <- "strings" # string pattern to search for
txt %>% str_detect(pat) # returns logical if vector contains that pattern
txt %>% str_which(pat) # show which vector the pattern exists
txt %>% str_locate(pat) # show character positions of the first instance of pattern
txt %>% str_locate_all(pat) # show all positions
txt %>% print
txt %>% str_sub(110,130) # subset string portion based on char position
txt %>% str_sub(
txt %>% str_locate(pat)
)
txt %>% str_subset(pat) # return string as char vector containing pattern
pat
txt %>% str_subset(pat) # return string as char vector containing pattern
txt %>% str_extract(pat) # pull pattern out of string
txt %>% str_extract_all(pat, simplify = F) # extract all patterns as string . set simplify = T to return matrix
txt %>% str_match(pat) # extract pattern as matrix
txt %>% str_match_all(pat) # extract all pattern instances as matrix
txt %>% str_split(pat,n = Inf)
txt_split <- txt %>% str_split(pat,n = Inf)
txt_split %>% str
txt_split <- txt %>% str_split(pat)
txt_split %>% str
txt_split <- txt %>% str_split(pat,n = Inf)
pat
txt_split <- txt %>% str_split(pat,n = Inf)
txt_split %>% str
?str_split
txt_split <- txt %>% str_split_fixed(pat,n = Inf)
txt_split %>% str
txt_split
txt_split[1,1]
txt_split[1,2]
txt_split[1,3]
txt_split[2,2]
txt_split[2,3]
txt_split[1,10]
txt_split[1,2] # view
txt_split %>% class
txt_split %>% dim
txt_split %>% str
txt_split <- txt %>% str_split_fixed(pat, n = Inf)
txt_split %>% dim # get dimensions of matrix
txt_split %>% str
txt_split[1,2] # view first row
txt_split[1,3] # view first row
txt_split %>% summary
txt_split %>% table
txt_split %>% head
txt_split %>% dim # get dimensions of matrix
txt_split[1,3] # view 1st row and 3rd column
txt_split[1,20] # view 1st row and 3rd column
txt_split %>% map(str_view_all("data"))
require(purrr)
txt_split %>% map(str_view_all("data"))
txt_split %>% map(str_view_all("data",""))
txt_split %>% str_view_all("data","")
pat <- "strings"
replace
repl
repl <- "plants"
txt %>% str_replace(fixed(" "),repl)
txt
txt %>% str_replace(" ",repl)
txt %>% str_replace_all(" ",repl)
txt %>% str_replace_all(pat,repl)
pat
txt %>% str_replace_all(pat,repl)
pat <- "Strings"
repl <- "plants"
txt %>% str_replace_all(pat,repl)
pat <- c("strings","Strings")
repl <- "plants"
txt %>% str_replace_all(pat,repl)
pat <- c("strings","Strings")
repl <- "plants"
txt %>% str_replace_all(pat,repl)
pat <- c("strings")
pat <- "strings"
repl <- "plants"
txt %>% str_replace_all(pat,repl)
